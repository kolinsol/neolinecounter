#! /usr/bin/env escript

-record(file_info, {name, size, line_number, line_lengths, type}).

main([]) ->
    {ok, CurDir} = file:get_cwd(),
    process_dir(CurDir, self()),
    loop().

loop() ->
    receive
        X -> io:format("rec ~p~n", [X]),
             loop()
    end.

process_dir(DirName, Receiver) ->
    {ok, FileList} = file:list_dir(DirName),
    ExtendedFileList = lists:map(fun(FileName) ->
                                     filename:join([DirName, FileName])
                                 end, FileList),
    {Files, Dirs} = categorize(ExtendedFileList),
    lists:foreach(fun(Dir) ->
                          spawn(fun() -> process_dir(Dir, Receiver) end)
                  end, Dirs),
    lists:foreach(fun(File) ->
                          spawn(fun() -> process_file(File, Receiver) end)
                  end, Files).

process_file(FileName, Receiver) ->
    Size = get_size(FileName),
    {LineNumber, LineLengths} = process_lines(FileName),
    Type = get_filetype(FileName),
    Receiver ! #file_info{name=FileName,
                          size=Size,
                          line_number=LineNumber,
                          line_lengths=LineLengths,
                          type=Type}.

process_lines(FileName) ->
    {ok, Device} = file:open(FileName, [read]),
    do_process_lines(Device, {0, []}).

do_process_lines(Device, {LineNumber, LineLengths}) ->
    case io:get_line(Device, "") of
        eof -> file:close(Device), {LineNumber, LineLengths};
        Line -> do_process_lines(Device,
                                 {LineNumber + 1, [length(Line)|LineLengths]})
    end.

get_filetype(FileName) -> 
    case filename:extension(FileName) of
        [] -> "no filetype";
        FileType -> FileType
    end.

get_size(FileName) -> filelib:file_size(FileName).

categorize(FileNames) ->
    Files = [FileName || FileName <- FileNames,
                         not filelib:is_dir(FileName)],
    Dirs = [FileName || FileName <- FileNames,
                        filelib:is_dir(FileName)],
    {Files, Dirs}.

